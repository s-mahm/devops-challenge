---
- name: Enable overlay and br_netfilter kernel modules
  blockinfile:
    path: /etc/modules-load.d/k8s.conf
    block: |
      overlay
      br_netfilter
    create: true

- name: Set up required sysctl params
  blockinfile:
    path: /etc/sysctl.d/k8s.conf
    block: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
      net.bridge.bridge-nf-call-ip6tables = 1
    create: true

- name: Reload sysctl
  shell: sysctl --system

- name: Install containred
  apt:
    pkg: containerd
    state: latest
    update_cache: true

- name: Make sure containerd is running
  systemd:
    name: containerd
    state: started

- name: Delete containerd runtime default configs
  file:
    path: /etc/containerd/config.toml
    state: absent

- name: Recreate containerd runtime default configs
  shell: containerd config default > /etc/containerd/config.toml

- name: Allow SystemdCgroup for kubernetes
  lineinfile:
    path: /etc/containerd/config.toml
    search_string: 'SystemdCgroup = false'
    insertafter: >-
      \[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options\]
    line: "\tSystemdCgroup = true"

- name: Install packages that allow apt to be used over HTTPS
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: true
  vars:
    packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg2
      - software-properties-common

- name: Add Dockers official GPG key
  become: true
  apt_key:
    url: https://download.docker.com/linux/debian/gpg
    state: present
  tags:
    - docker
    - dev

- name: Verify that we have the key with the fingerprint
  become: true
  apt_key:
    id: 0EBFCD88
    state: present
  tags:
    - docker
    - dev

- name: Set up the stable repository
  become: true
  apt_repository:
    repo: >-
      deb [arch=amd64] https://download.docker.com/linux/debian bullseye stable
    state: present
    update_cache: true

- name: Install docker
  apt:
    pkg:
      - docker-ce
      - docker-ce-cli
    state: latest
    update_cache: true

- name: Make docker use systemd instead of cgroups
  lineinfile:
    path: /etc/docker/daemon.json
    line: "{\n\t\"exec-opts\": [\"native.cgroupdriver=systemd\"]\n}"
    create: true

- name: Allow docker to pull with HTTP
  lineinfile:
    path: /etc/docker/daemon.json
    line: "{\n\t\"insecure-registries\": [\"192.168.60.10:5000\"]\n}"
    create: true

- name: Make sure docker has started
  service:
    name: docker
    state: started

- name: Add vagrant user to docker group
  user:
    name: vagrant
    group: docker

- name: Remove swapfile from /etc/fstab
  mount:
    name: "{{ item }}"
    fstype: swap
    state: absent
  with_items:
    - swap
    - none

- name: Disable swap
  command: swapoff -a
  when: ansible_swaptotal_mb > 0

- name: Add an apt signing key for Kubernetes
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Adding apt repository for Kubernetes
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present
    filename: kubernetes.list

- name: Install Kubernetes binaries
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: true
  vars:
    packages:
      - kubelet
      - kubeadm
      - kubectl

- name: Create Kubernetes config
  file:
    path: /etc/default/kubelet
    state: touch

- name: Add kubectl autocomplete
  command: echo "source <(kubectl completion bash)" >> /home/vagrant/.bashrc

- name: Get ip of node
  shell: ip a | grep -Po "192\.168\.60\.1\d"
  register: ipaddr

- name: Configure node ip for kubelet
  lineinfile:
    path: /etc/default/kubelet
    line: KUBELET_EXTRA_ARGS=--node-ip={{ ipaddr.stdout }}

- name: Restart kubelet
  service:
    name: kubelet
    daemon_reload: true
    state: restarted
